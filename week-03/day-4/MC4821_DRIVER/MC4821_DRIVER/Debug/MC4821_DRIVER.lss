
MC4821_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8d  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  00000cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dc  00000000  00000000  000015b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001fe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
void SystemInit() {
	// Call the DAC driver init function
	MCP4821_Init();
}

int main(void) {
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
#endif
#include <avr/delay.h>

void SystemInit() {
	// Call the DAC driver init function
	MCP4821_Init();
  8e:	0e 94 62 00 	call	0xc4	; 0xc4 <MCP4821_Init>
	MCP4821_Data_t DAC_data;
	DAC_data.start_zero = 0;
	DAC_data.dont_care = 0;
	DAC_data.gain = 0;
	DAC_data.shutdown = 1;
	DAC_data.data = 0xFFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	89 83       	std	Y+1, r24	; 0x01
  96:	8f e1       	ldi	r24, 0x1F	; 31
  98:	8a 83       	std	Y+2, r24	; 0x02

	// Send the data structure
	MCP4821_SendData(&DAC_data);
  9a:	ce 01       	movw	r24, r28
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	0e 94 89 00 	call	0x112	; 0x112 <MCP4821_SendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	84 e3       	ldi	r24, 0x34	; 52
  a6:	9c e0       	ldi	r25, 0x0C	; 12
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x24>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x2e>
  b2:	00 00       	nop
  b4:	f6 cf       	rjmp	.-20     	; 0xa2 <main+0x1e>

000000b6 <setSPIMode>:
#include <string.h>
#include <stdint.h>
#include "MCP4821_driver.h"
void setSPIMode(){
	if(!SPI_CPOL){
		SPCR &=~(1<<CPOL);
  b6:	8c b5       	in	r24, 0x2c	; 44
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	8c bd       	out	0x2c, r24	; 44
		}else{
		SPCR|=(1<<CPOL);
	}
	if(!SPI_CPHA){
		SPCR &=~(1<<CPHA);
  bc:	8c b5       	in	r24, 0x2c	; 44
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	8c bd       	out	0x2c, r24	; 44
  c2:	08 95       	ret

000000c4 <MCP4821_Init>:
	}	
}
void MCP4821_Init() {
	// TODO:
	// Initialize the SPI related pins. Use the definitions from MCP4821_driver.h!
	SPI_SS_DDR |= (1<<SPI_SCK_PORT_POS)|(1<<SPI_MOSI_DDR_POS)|(1 << SPI_SS_DDR_POS) ;
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8c 62       	ori	r24, 0x2C	; 44
  c8:	84 b9       	out	0x04, r24	; 4
	// TODO:
	// Pull SS pin to high!
	SPI_SS_PORT |=(1<<SPI_SS_PORT_POS);	
  ca:	2a 9a       	sbi	0x05, 2	; 5
	// TODO:
	// Set the SPI mode (CPOL and CPHA). Use the definitions from MCP4821_driver.h!
	setSPIMode();	
  cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <setSPIMode>
	// TODO:
	// Set master mode
	SPCR |= 1<<MSTR;
  d0:	8c b5       	in	r24, 0x2c	; 44
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	8c bd       	out	0x2c, r24	; 44
	// TODO:
	// Set the clock frequency. Use the definitions from MCP4821_driver.h!
	SPCR |=SPI_SPR;
  d6:	8c b5       	in	r24, 0x2c	; 44
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	8c bd       	out	0x2c, r24	; 44
	// TODO:
	// Enable SPI peripheral
	SPCR |= 1<<SPE;
  dc:	8c b5       	in	r24, 0x2c	; 44
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	8c bd       	out	0x2c, r24	; 44
  e2:	08 95       	ret

000000e4 <MCP4821_SendRawData>:
}

void MCP4821_SendRawData(uint16_t data) {
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	1f 92       	push	r1
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	// TODO:
	// Pull SS low
	SPI_SS_PORT &=~(1<<SPI_SS_PORT_POS);	
  ee:	2a 98       	cbi	0x05, 2	; 5
	// TODO:
	// Put the top 8bits of the data to the SPI shift register
	SPDR=(uint8_t)(data>>8);
  f0:	9e bd       	out	0x2e, r25	; 46
	// TODO:
	// Wait for the end of the transmission
	// You have to read the SPDR register to clear the SPIF flag after the end of transmission
	while(!(SPSR & (1<<SPIF)));
  f2:	0d b4       	in	r0, 0x2d	; 45
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <MCP4821_SendRawData+0xe>
	volatile uint8_t dummy_variable = SPDR;	
  f8:	9e b5       	in	r25, 0x2e	; 46
  fa:	99 83       	std	Y+1, r25	; 0x01
	// TODO:
	// Put the bottom 8bits of the data to the SPI shift register
	SPDR=(uint8_t)((data<<8)>>8);
  fc:	8e bd       	out	0x2e, r24	; 46
	// TODO:
	// Wait for the end of the transmission
	// You have to read the SPDR register to clear the SPIF flag after the end of transmission
	while(!(SPSR & (1<<SPIF)));
  fe:	0d b4       	in	r0, 0x2d	; 45
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <MCP4821_SendRawData+0x1a>
	dummy_variable = SPDR;
 104:	8e b5       	in	r24, 0x2e	; 46
 106:	89 83       	std	Y+1, r24	; 0x01
	
	// TODO:
	// Pull SS high
	SPI_SS_PORT |=(1<<SPI_SS_PORT_POS);	
 108:	2a 9a       	sbi	0x05, 2	; 5
}
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <MCP4821_SendData>:
void MCP4821_SendData(MCP4821_Data_t* data) {
	// Convert the data variable to a 16bit number with memcpy()
	// Then use the MCP4821_SendRawData() function to send the data
	uint16_t buffer;
	memcpy(&buffer, data, sizeof(MCP4821_Data_t));
	MCP4821_SendRawData(buffer);
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <MCP4821_SendRawData>
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
