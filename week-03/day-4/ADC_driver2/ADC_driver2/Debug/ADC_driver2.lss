
ADC_driver2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000046a  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a7  00800110  00800110  0000050e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fac  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a96  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a1  00000000  00000000  00002062  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000556  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000047f  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ea e6       	ldi	r30, 0x6A	; 106
  80:	f4 e0       	ldi	r31, 0x04	; 4
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a0 31       	cpi	r26, 0x10	; 16
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a0 e1       	ldi	r26, 0x10	; 16
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a7 3b       	cpi	r26, 0xB7	; 183
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  a2:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <ADC_Init>:

void ADC_Init() {
	// TODO:
	// Set the reference voltage to AVcc.
	//ADMUX|=0b01000000;
	ADMUX|=(1<<REFS0);
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	// Set the data format to right adjusted, so the bottom 8bits will be in ADCL register
	//ADMUX&=~(1<<ADLAR);
	// TODO:
	// Set the used channel. Use the definitions from ADC_driver.h!
	
	ADMUX|=ADC_CH;//nem kell tologatni, a végén vannak a bitek
  b4:	80 81       	ld	r24, Z
  b6:	80 83       	st	Z, r24
	// TODO:
	// Set the prescaler. Use the definitions from ADC_driver.h!
	ADCSRA|=ADC_ADPS;
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	// TODO:
	// Enable the ADC peripheral
	ADCSRA|=(1<<ADEN);
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <ADC_Read>:
}

uint16_t ADC_Read() {
	// TODO:
	// Start a conversion with ADSC bit setup
	ADCSRA|=(1<<ADSC);
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	// TODO:
	// Wait for the conversion to finish by checking ADSC bit
	while(ADCSRA & (1<<ADSC));//This 1 is written as long as the conversion is in progress, after which it returns to zero
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <ADC_Read+0xa>
	// TODO:
	// return with the read data, use the "ADC" register!
	return ADC;
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e2:	08 95       	ret

000000e4 <SystemInit>:
void kiirpipe(){
	 printf("\n"); 
	for (int i=0; i<=SIZE;i++){
		printf(" %d", pipe[i]);
	} //printf("\n");
}
  e4:	25 9a       	sbi	0x04, 5	; 4
  e6:	2d 98       	cbi	0x05, 5	; 5
  e8:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_Init>
  ec:	0e 94 97 01 	call	0x32e	; 0x32e <UART_Init>
  f0:	78 94       	sei
  f2:	e1 e1       	ldi	r30, 0x11	; 17
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	83 e4       	ldi	r24, 0x43	; 67
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	11 92       	st	Z+, r1
  fc:	e8 17       	cp	r30, r24
  fe:	f9 07       	cpc	r31, r25
 100:	e1 f7       	brne	.-8      	; 0xfa <SystemInit+0x16>
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <pipe+0x32>
 108:	08 95       	ret

0000010a <addchar>:
 10a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 10e:	e1 33       	cpi	r30, 0x31	; 49
 110:	61 f4       	brne	.+24     	; 0x12a <addchar+0x20>
 112:	e1 e1       	ldi	r30, 0x11	; 17
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	22 e4       	ldi	r18, 0x42	; 66
 118:	31 e0       	ldi	r19, 0x01	; 1
 11a:	91 81       	ldd	r25, Z+1	; 0x01
 11c:	91 93       	st	Z+, r25
 11e:	2e 17       	cp	r18, r30
 120:	3f 07       	cpc	r19, r31
 122:	d9 f7       	brne	.-10     	; 0x11a <addchar+0x10>
 124:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <pipe+0x31>
 128:	08 95       	ret
 12a:	ef 5f       	subi	r30, 0xFF	; 255
 12c:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__data_end>
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ef 5e       	subi	r30, 0xEF	; 239
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <kirajzol>:
void kirajzol(){
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');
 146:	8a e0       	ldi	r24, 0x0A	; 10
 148:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 164:	0f e0       	ldi	r16, 0x0F	; 15
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	0f 2e       	mov	r0, r31
 16a:	f3 e4       	ldi	r31, 0x43	; 67
 16c:	ef 2e       	mov	r14, r31
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	ff 2e       	mov	r15, r31
 172:	f0 2d       	mov	r31, r0
 174:	1b c0       	rjmp	.+54     	; 0x1ac <kirajzol+0x72>
	for(int j=0;j<Y; j++){
		for (int i=0;i<SIZE;i++){
			//_delay_ms(1);
			if(pipe[i]==Y-j){
 176:	89 91       	ld	r24, Y+
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 17       	cp	r24, r16
 17c:	91 07       	cpc	r25, r17
 17e:	21 f4       	brne	.+8      	; 0x188 <kirajzol+0x4e>
				UART_SendCharacter('@');
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 186:	03 c0       	rjmp	.+6      	; 0x18e <kirajzol+0x54>
				}else{
				UART_SendCharacter('.');
 188:	8e e2       	ldi	r24, 0x2E	; 46
 18a:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
	} //printf("\n");
}
void kirajzol(){
	UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');
	for(int j=0;j<Y; j++){
		for (int i=0;i<SIZE;i++){
 18e:	ec 16       	cp	r14, r28
 190:	fd 06       	cpc	r15, r29
 192:	89 f7       	brne	.-30     	; 0x176 <kirajzol+0x3c>
				UART_SendCharacter('@');
				}else{
				UART_SendCharacter('.');
			}
		}
		UART_SendCharacter(' ');UART_SendCharacter(' ');
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
		UART_SendCharacter('\n');
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	0e 94 c0 01 	call	0x380	; 0x380 <UART_SendCharacter>
 1a6:	01 50       	subi	r16, 0x01	; 1
 1a8:	11 09       	sbc	r17, r1
		printf(" %d", pipe[i]);
	} //printf("\n");
}
void kirajzol(){
	UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');UART_SendCharacter('\n');
	for(int j=0;j<Y; j++){
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <kirajzol+0x78>
 1ac:	c1 e1       	ldi	r28, 0x11	; 17
 1ae:	d1 e0       	ldi	r29, 0x01	; 1
 1b0:	e2 cf       	rjmp	.-60     	; 0x176 <kirajzol+0x3c>
		UART_SendCharacter('\n');
	}
	//printf("cucc:\n");
	//kiirpipe();
	
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	08 95       	ret

000001c0 <main>:
int main(void) {
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	6c 97       	sbiw	r28, 0x1c	; 28
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_data, data1, data2, data3, data4;
	SystemInit();
 1d4:	0e 94 72 00 	call	0xe4	; 0xe4 <SystemInit>
	FILE UART_output = FDEV_SETUP_STREAM(UART_SendCharacter, NULL, _FDEV_SETUP_WRITE);
 1d8:	8e e0       	ldi	r24, 0x0E	; 14
 1da:	de 01       	movw	r26, r28
 1dc:	11 96       	adiw	r26, 0x01	; 1
 1de:	fd 01       	movw	r30, r26
 1e0:	28 2f       	mov	r18, r24
 1e2:	11 92       	st	Z+, r1
 1e4:	2a 95       	dec	r18
 1e6:	e9 f7       	brne	.-6      	; 0x1e2 <main+0x22>
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	9c 83       	std	Y+4, r25	; 0x04
 1ec:	20 ec       	ldi	r18, 0xC0	; 192
 1ee:	31 e0       	ldi	r19, 0x01	; 1
 1f0:	3a 87       	std	Y+10, r19	; 0x0a
 1f2:	29 87       	std	Y+9, r18	; 0x09
	stdout = &UART_output;
 1f4:	21 eb       	ldi	r18, 0xB1	; 177
 1f6:	31 e0       	ldi	r19, 0x01	; 1
 1f8:	f9 01       	movw	r30, r18
 1fa:	b3 83       	std	Z+3, r27	; 0x03
 1fc:	a2 83       	std	Z+2, r26	; 0x02
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
 1fe:	1e 96       	adiw	r26, 0x0e	; 14
 200:	fd 01       	movw	r30, r26
 202:	11 92       	st	Z+, r1
 204:	8a 95       	dec	r24
 206:	e9 f7       	brne	.-6      	; 0x202 <main+0x42>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	8a 8b       	std	Y+18, r24	; 0x12
 20c:	88 ec       	ldi	r24, 0xC8	; 200
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	9a 8f       	std	Y+26, r25	; 0x1a
 212:	89 8f       	std	Y+25, r24	; 0x19
	stdin = &UART_input;
 214:	f9 01       	movw	r30, r18
 216:	b1 83       	std	Z+1, r27	; 0x01
 218:	a0 83       	st	Z, r26
	printf("Startup...\r\n");
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 03 02 	call	0x406	; 0x406 <puts>
		adc_data = (data1+data2+data3+data4)/16;
		
		//printf("%d \r\n", adc_data);
		adc_data = adc_data*Y;
		//printf(" dat2: %d ", adc_data);
		data = adc_data/255;
 222:	0f 2e       	mov	r0, r31
 224:	ff e0       	ldi	r31, 0x0F	; 15
 226:	df 2e       	mov	r13, r31
 228:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	ff ef       	ldi	r31, 0xFF	; 255
 22c:	25 ea       	ldi	r18, 0xA5	; 165
 22e:	8e e0       	ldi	r24, 0x0E	; 14
 230:	f1 50       	subi	r31, 0x01	; 1
 232:	20 40       	sbci	r18, 0x00	; 0
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <main+0x70>
 238:	00 c0       	rjmp	.+0      	; 0x23a <main+0x7a>
 23a:	00 00       	nop
	FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_GetCharacter, _FDEV_SETUP_READ);
	stdin = &UART_input;
	printf("Startup...\r\n");
	while (1) {
		_delay_ms(300);
		data1 = ADC_Read();
 23c:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 240:	5c 01       	movw	r10, r24
 242:	ef e1       	ldi	r30, 0x1F	; 31
 244:	fe e4       	ldi	r31, 0x4E	; 78
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0x86>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x8c>
 24c:	00 00       	nop
		_delay_ms(5);
		data2 = ADC_Read();
 24e:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 252:	7c 01       	movw	r14, r24
 254:	8f e1       	ldi	r24, 0x1F	; 31
 256:	9e e4       	ldi	r25, 0x4E	; 78
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x98>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x9e>
 25e:	00 00       	nop
		_delay_ms(5);
		data3 = ADC_Read();
 260:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 264:	8c 01       	movw	r16, r24
 266:	ef e1       	ldi	r30, 0x1F	; 31
 268:	fe e4       	ldi	r31, 0x4E	; 78
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <main+0xaa>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0xb0>
 270:	00 00       	nop
		_delay_ms(5);
		data4 = ADC_Read();
 272:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
		adc_data = (data1+data2+data3+data4)/16;
 276:	ea 0c       	add	r14, r10
 278:	fb 1c       	adc	r15, r11
 27a:	0e 0d       	add	r16, r14
 27c:	1f 1d       	adc	r17, r15
 27e:	80 0f       	add	r24, r16
 280:	91 1f       	adc	r25, r17
 282:	8c 01       	movw	r16, r24
 284:	12 95       	swap	r17
 286:	02 95       	swap	r16
 288:	0f 70       	andi	r16, 0x0F	; 15
 28a:	01 27       	eor	r16, r17
 28c:	1f 70       	andi	r17, 0x0F	; 15
 28e:	01 27       	eor	r16, r17
		
		//printf("%d \r\n", adc_data);
		adc_data = adc_data*Y;
		//printf(" dat2: %d ", adc_data);
		data = adc_data/255;
 290:	d0 9e       	mul	r13, r16
 292:	90 01       	movw	r18, r0
 294:	d1 9e       	mul	r13, r17
 296:	30 0d       	add	r19, r0
 298:	11 24       	eor	r1, r1
 29a:	a1 e8       	ldi	r26, 0x81	; 129
 29c:	b0 e8       	ldi	r27, 0x80	; 128
 29e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__umulhisi3>
 2a2:	88 0f       	add	r24, r24
 2a4:	89 2f       	mov	r24, r25
 2a6:	88 1f       	adc	r24, r24
 2a8:	99 0b       	sbc	r25, r25
 2aa:	91 95       	neg	r25
 2ac:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <data>
		//printf(" data3: %d ", adc_data);
		//UART_SendCharacter();
		addchar(data);
 2b0:	0e 94 85 00 	call	0x10a	; 0x10a <addchar>
		kirajzol();
 2b4:	0e 94 9d 00 	call	0x13a	; 0x13a <kirajzol>
 2b8:	b8 cf       	rjmp	.-144    	; 0x22a <main+0x6a>

000002ba <__vector_18>:
﻿#include "UART_driver.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdint.h>

ISR(USART_RX_vect) {
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
	// Put received character into the circular buffer
	*(rx_buffer.write_ptr) = UDR0;
 2d4:	ec ea       	ldi	r30, 0xAC	; 172
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	a0 81       	ld	r26, Z
 2da:	b1 81       	ldd	r27, Z+1	; 0x01
 2dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2e0:	8c 93       	st	X, r24

	// Increment the write ptr
	// Be aware that the write ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if(rx_buffer.write_ptr == rx_buffer.tail) {
 2e2:	20 81       	ld	r18, Z
 2e4:	31 81       	ldd	r19, Z+1	; 0x01
 2e6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <rx_buffer+0x66>
 2ea:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <rx_buffer+0x67>
 2ee:	28 17       	cp	r18, r24
 2f0:	39 07       	cpc	r19, r25
 2f2:	49 f4       	brne	.+18     	; 0x306 <__vector_18+0x4c>
		rx_buffer.write_ptr = rx_buffer.head;
 2f4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <rx_buffer+0x64>
 2f8:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <rx_buffer+0x65>
 2fc:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <rx_buffer+0x69>
 300:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <rx_buffer+0x68>
 304:	07 c0       	rjmp	.+14     	; 0x314 <__vector_18+0x5a>
		} else {
		rx_buffer.write_ptr++;
 306:	ec ea       	ldi	r30, 0xAC	; 172
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	91 83       	std	Z+1, r25	; 0x01
 312:	80 83       	st	Z, r24
	}
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <UART_Init>:
	// See the datasheet on page 246 for hints and table 25-9.

	// At first set the baud rate to 9600
	// The CPU clock frequency is 16MHz
	uint16_t ubbr = 8;
	UBRR0H = ubbr >> 8;
 32e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = ubbr;
 332:	88 e0       	ldi	r24, 0x08	; 8
 334:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// Set the following frame format: 8N1
	// It's set by default to 8N1

	// Enable TX
	UCSR0B |= 1 << TXEN0;
 338:	e1 ec       	ldi	r30, 0xC1	; 193
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	88 60       	ori	r24, 0x08	; 8
 340:	80 83       	st	Z, r24

	// Enable RX
	UCSR0B |= 1 << RXEN0;
 342:	80 81       	ld	r24, Z
 344:	80 61       	ori	r24, 0x10	; 16
 346:	80 83       	st	Z, r24

	// Enable RX interrupt
	UCSR0B |= 1 << RXCIE0;
 348:	80 81       	ld	r24, Z
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	80 83       	st	Z, r24

	// Initialize circular buffer pointers, they should point to the head of the buffer
	rx_buffer.head = &(rx_buffer.buffer[0]);
 34e:	e8 ea       	ldi	r30, 0xA8	; 168
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	84 e4       	ldi	r24, 0x44	; 68
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	80 83       	st	Z, r24
	rx_buffer.tail = &(rx_buffer.buffer[RX_CIRC_BUFF_LEN-1]);
 35a:	87 ea       	ldi	r24, 0xA7	; 167
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <rx_buffer+0x67>
 362:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <rx_buffer+0x66>
	rx_buffer.read_ptr = rx_buffer.head;
 366:	80 81       	ld	r24, Z
 368:	91 81       	ldd	r25, Z+1	; 0x01
 36a:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <rx_buffer+0x6b>
 36e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <rx_buffer+0x6a>
	rx_buffer.write_ptr = rx_buffer.head;
 372:	80 81       	ld	r24, Z
 374:	91 81       	ldd	r25, Z+1	; 0x01
 376:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <rx_buffer+0x69>
 37a:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <rx_buffer+0x68>
 37e:	08 95       	ret

00000380 <UART_SendCharacter>:
void UART_SendCharacter(char character) {
	// This function can send a character through UART with polling method
	// See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

	// Wait for empty USART buffer register
	while ( !( UCSR0A & (1<<UDRE0)) );
 380:	e0 ec       	ldi	r30, 0xC0	; 192
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	90 81       	ld	r25, Z
 386:	95 ff       	sbrs	r25, 5
 388:	fd cf       	rjmp	.-6      	; 0x384 <UART_SendCharacter+0x4>

	// Put data to USART buffer register
	UDR0 = character;
 38a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 38e:	08 95       	ret

00000390 <UART_GetCharacter>:
}

char UART_GetCharacter() {
	// Wait for data in the circular buffer, this can be detected if the write and read pointers are pointing to the same memory block
	while(rx_buffer.read_ptr == rx_buffer.write_ptr);
 390:	ae ea       	ldi	r26, 0xAE	; 174
 392:	b1 e0       	ldi	r27, 0x01	; 1
 394:	ec ea       	ldi	r30, 0xAC	; 172
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	2d 91       	ld	r18, X+
 39a:	3c 91       	ld	r19, X
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	80 81       	ld	r24, Z
 3a0:	91 81       	ldd	r25, Z+1	; 0x01
 3a2:	28 17       	cp	r18, r24
 3a4:	39 07       	cpc	r19, r25
 3a6:	c1 f3       	breq	.-16     	; 0x398 <UART_GetCharacter+0x8>

	// Save the data to a temporary variable
	char to_return = *rx_buffer.read_ptr;
 3a8:	ee ea       	ldi	r30, 0xAE	; 174
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	a0 81       	ld	r26, Z
 3ae:	b1 81       	ldd	r27, Z+1	; 0x01
 3b0:	8c 91       	ld	r24, X

	// Increment the read ptr
	// Be aware that the read ptr might point to the end of the buffer.
	// In this case you have to set it back to the start of the buffer
	if(rx_buffer.read_ptr == rx_buffer.tail) {
 3b2:	40 81       	ld	r20, Z
 3b4:	51 81       	ldd	r21, Z+1	; 0x01
 3b6:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <rx_buffer+0x66>
 3ba:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <rx_buffer+0x67>
 3be:	42 17       	cp	r20, r18
 3c0:	53 07       	cpc	r21, r19
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <UART_GetCharacter+0x46>
		rx_buffer.read_ptr = rx_buffer.head;
 3c4:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <rx_buffer+0x64>
 3c8:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <rx_buffer+0x65>
 3cc:	30 93 af 01 	sts	0x01AF, r19	; 0x8001af <rx_buffer+0x6b>
 3d0:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <rx_buffer+0x6a>
 3d4:	08 95       	ret
		} else {
		rx_buffer.read_ptr++;
 3d6:	ee ea       	ldi	r30, 0xAE	; 174
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	20 81       	ld	r18, Z
 3dc:	31 81       	ldd	r19, Z+1	; 0x01
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
 3e2:	31 83       	std	Z+1, r19	; 0x01
 3e4:	20 83       	st	Z, r18
	}

	// Return the read character
	return to_return;
 3e6:	08 95       	ret

000003e8 <__umulhisi3>:
 3e8:	a2 9f       	mul	r26, r18
 3ea:	b0 01       	movw	r22, r0
 3ec:	b3 9f       	mul	r27, r19
 3ee:	c0 01       	movw	r24, r0
 3f0:	a3 9f       	mul	r26, r19
 3f2:	70 0d       	add	r23, r0
 3f4:	81 1d       	adc	r24, r1
 3f6:	11 24       	eor	r1, r1
 3f8:	91 1d       	adc	r25, r1
 3fa:	b2 9f       	mul	r27, r18
 3fc:	70 0d       	add	r23, r0
 3fe:	81 1d       	adc	r24, r1
 400:	11 24       	eor	r1, r1
 402:	91 1d       	adc	r25, r1
 404:	08 95       	ret

00000406 <puts>:
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <__iob+0x2>
 412:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <__iob+0x3>
 416:	23 81       	ldd	r18, Z+3	; 0x03
 418:	21 ff       	sbrs	r18, 1
 41a:	1b c0       	rjmp	.+54     	; 0x452 <puts+0x4c>
 41c:	8c 01       	movw	r16, r24
 41e:	d0 e0       	ldi	r29, 0x00	; 0
 420:	c0 e0       	ldi	r28, 0x00	; 0
 422:	f8 01       	movw	r30, r16
 424:	81 91       	ld	r24, Z+
 426:	8f 01       	movw	r16, r30
 428:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <__iob+0x2>
 42c:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <__iob+0x3>
 430:	db 01       	movw	r26, r22
 432:	18 96       	adiw	r26, 0x08	; 8
 434:	ed 91       	ld	r30, X+
 436:	fc 91       	ld	r31, X
 438:	19 97       	sbiw	r26, 0x09	; 9
 43a:	88 23       	and	r24, r24
 43c:	31 f0       	breq	.+12     	; 0x44a <puts+0x44>
 43e:	09 95       	icall
 440:	89 2b       	or	r24, r25
 442:	79 f3       	breq	.-34     	; 0x422 <puts+0x1c>
 444:	df ef       	ldi	r29, 0xFF	; 255
 446:	cf ef       	ldi	r28, 0xFF	; 255
 448:	ec cf       	rjmp	.-40     	; 0x422 <puts+0x1c>
 44a:	8a e0       	ldi	r24, 0x0A	; 10
 44c:	09 95       	icall
 44e:	89 2b       	or	r24, r25
 450:	19 f0       	breq	.+6      	; 0x458 <puts+0x52>
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	9f ef       	ldi	r25, 0xFF	; 255
 456:	02 c0       	rjmp	.+4      	; 0x45c <puts+0x56>
 458:	8d 2f       	mov	r24, r29
 45a:	9c 2f       	mov	r25, r28
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
