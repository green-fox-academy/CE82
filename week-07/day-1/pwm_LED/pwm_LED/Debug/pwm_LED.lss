
pwm_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a09  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084f  00000000  00000000  00000c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040b  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000172  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001e69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:
#include <avr/delay.h>
#include "pwm_driver.h"
int main(void)
{
    /* Replace with your application code */
	init_pwm();
  84:	0e 94 81 00 	call	0x102	; 0x102 <init_pwm>
	
	uint8_t duty = 80, add = 1;
  88:	d1 e0       	ldi	r29, 0x01	; 1
  8a:	c0 e5       	ldi	r28, 0x50	; 80
	
    while (1) 
    {	
		if (duty == 100)
			add = -1;
  8c:	0f ef       	ldi	r16, 0xFF	; 255
		if (duty == 1)
			add = 1;
  8e:	11 e0       	ldi	r17, 0x01	; 1
	
	uint8_t duty = 80, add = 1;
	
    while (1) 
    {	
		if (duty == 100)
  90:	c4 36       	cpi	r28, 0x64	; 100
  92:	21 f0       	breq	.+8      	; 0x9c <main+0x18>
			add = -1;
		if (duty == 1)
  94:	c1 30       	cpi	r28, 0x01	; 1
  96:	19 f4       	brne	.+6      	; 0x9e <main+0x1a>
			add = 1;
  98:	d1 2f       	mov	r29, r17
  9a:	01 c0       	rjmp	.+2      	; 0x9e <main+0x1a>
	uint8_t duty = 80, add = 1;
	
    while (1) 
    {	
		if (duty == 100)
			add = -1;
  9c:	d0 2f       	mov	r29, r16
		if (duty == 1)
			add = 1;
		duty += add;
  9e:	cd 0f       	add	r28, r29
		set_duty_cycle(0);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 99 00 	call	0x132	; 0x132 <set_duty_cycle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x28>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x32>
  b6:	00 00       	nop
		_delay_ms(1000);
		set_duty_cycle(30);
  b8:	8e e1       	ldi	r24, 0x1E	; 30
  ba:	0e 94 99 00 	call	0x132	; 0x132 <set_duty_cycle>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	83 ed       	ldi	r24, 0xD3	; 211
  c2:	90 e3       	ldi	r25, 0x30	; 48
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x40>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4a>
  ce:	00 00       	nop
		_delay_ms(1000);
		set_duty_cycle(70);
  d0:	86 e4       	ldi	r24, 0x46	; 70
  d2:	0e 94 99 00 	call	0x132	; 0x132 <set_duty_cycle>
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	83 ed       	ldi	r24, 0xD3	; 211
  da:	90 e3       	ldi	r25, 0x30	; 48
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x58>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x62>
  e6:	00 00       	nop
		_delay_ms(1000);
		set_duty_cycle(100);
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	0e 94 99 00 	call	0x132	; 0x132 <set_duty_cycle>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	83 ed       	ldi	r24, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x70>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7a>
  fe:	00 00       	nop
 100:	c7 cf       	rjmp	.-114    	; 0x90 <main+0xc>

00000102 <init_pwm>:
	3		0		1		1		Fast PWM							0xFF	BOTTOM (= 0x00)		MAX (= 0xFF)
	7		1		1		1		Fast PWM							OCRA	BOTTOM				TOP
	 Data Direction Register (DDR) bit corresponding to the OC0A pin must be set in order to enable the output driver.
	*/
	//DDRB |= 1 << DDRB0;
	DDRD |= (1 << DDRD6);	//D6 output
 102:	56 9a       	sbi	0x0a, 6	; 10
	//PORTD |= (1 << PORTD6);//teszt
	
	TCCR0A |= (1 << WGM00) | (1 << WGM01); //fast pwm
 104:	84 b5       	in	r24, 0x24	; 36
 106:	83 60       	ori	r24, 0x03	; 3
 108:	84 bd       	out	0x24, r24	; 36
	TCCR0B  &= ~ (1 << WGM02)  ;// Toggle OC0A on Compare Match
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS00); //van clock
 110:	85 b5       	in	r24, 0x25	; 37
 112:	81 60       	ori	r24, 0x01	; 1
 114:	85 bd       	out	0x25, r24	; 37
	//TCCR0B |= (1 << CS01);
	//TCCR0B |= (1 << CS02);
	TCCR0B &= ~ (1 << CS01);//no prescaling
 116:	85 b5       	in	r24, 0x25	; 37
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~ (1 << CS02);//no prescaling
 11c:	85 b5       	in	r24, 0x25	; 37
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1 << COM0A1) ; 
 122:	84 b5       	in	r24, 0x24	; 36
 124:	80 68       	ori	r24, 0x80	; 128
 126:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~  (1 << COM0A0); //non-inverting
 128:	85 b5       	in	r24, 0x25	; 37
 12a:	8f 7b       	andi	r24, 0xBF	; 191
 12c:	85 bd       	out	0x25, r24	; 37
					WGM02 = 1: Toggle OC0A on Compare Match
	1		0		Clear OC0A on Compare Match, set OC0A at BOTTOM (non-inverting mode)
	1		1		Set OC0A on Compare Match, clear OC0A at BOTTOM (inverting mode)
	*/
	//TIMSK0 |= (1 << OCIE0A); //hÃ¡tha kell
	sei();
 12e:	78 94       	sei
 130:	08 95       	ret

00000132 <set_duty_cycle>:
	
	
}
void set_duty_cycle(uint8_t value)
{
	if (value > 100 || value < 0)
 132:	85 36       	cpi	r24, 0x65	; 101
 134:	78 f4       	brcc	.+30     	; 0x154 <set_duty_cycle+0x22>
		return;
	uint16_t tmp = (255 * value);
	OCR0A = tmp/100;
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	89 9f       	mul	r24, r25
 13a:	90 01       	movw	r18, r0
 13c:	11 24       	eor	r1, r1
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	36 95       	lsr	r19
 144:	27 95       	ror	r18
 146:	ab e7       	ldi	r26, 0x7B	; 123
 148:	b4 e1       	ldi	r27, 0x14	; 20
 14a:	0e 94 ab 00 	call	0x156	; 0x156 <__umulhisi3>
 14e:	96 95       	lsr	r25
 150:	87 95       	ror	r24
 152:	87 bd       	out	0x27, r24	; 39
 154:	08 95       	ret

00000156 <__umulhisi3>:
 156:	a2 9f       	mul	r26, r18
 158:	b0 01       	movw	r22, r0
 15a:	b3 9f       	mul	r27, r19
 15c:	c0 01       	movw	r24, r0
 15e:	a3 9f       	mul	r26, r19
 160:	70 0d       	add	r23, r0
 162:	81 1d       	adc	r24, r1
 164:	11 24       	eor	r1, r1
 166:	91 1d       	adc	r25, r1
 168:	b2 9f       	mul	r27, r18
 16a:	70 0d       	add	r23, r0
 16c:	81 1d       	adc	r24, r1
 16e:	11 24       	eor	r1, r1
 170:	91 1d       	adc	r25, r1
 172:	08 95       	ret

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
