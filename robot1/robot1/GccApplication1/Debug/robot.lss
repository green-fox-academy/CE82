
robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002d0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  0080010c  0080010c  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1d  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f1  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f6  00000000  00000000  00002513  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e0 ed       	ldi	r30, 0xD0	; 208
  80:	f2 e0       	ldi	r31, 0x02	; 2
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a3 33       	cpi	r26, 0x33	; 51
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  a2:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <ADC_init>:
#include <stdint.h>

void ADC_init() {
    // TODO:
    // Set the reference voltage to AVcc.
    ADMUX = (0x3F & ADMUX) | (0b01 << REFS0);
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8f 73       	andi	r24, 0x3F	; 63
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
    // TODO:
    // Set the data format to right adjusted, so the bottom 8bits will be in ADCL register

    // TODO:
    // Set the used channel. Use the definitions from ADC_driver.h!
    ADMUX = (0xF0 & ADMUX) | ADC_CH;
  b6:	80 81       	ld	r24, Z
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	80 83       	st	Z, r24

    // TODO:
    // Set the prescaler. Use the definitions from ADC_driver.h!
    ADCSRA = (0xF8 & ADMUX) | ADC_ADPS;
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 83       	st	Z, r24

    // TODO:
    // Enable the ADC peripheral
    ADCSRA |= 1 << ADEN;
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <ADC_read>:
}

uint16_t ADC_read() {
    // TODO:
    // Start a conversion with ADSC bit setup
    ADCSRA |= 1 << ADSC;
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24

    // TODO:
    // Wait for the conversion to finish by checking ADSC bit
    while (ADCSRA & (1 << ADSC));
  d8:	80 81       	ld	r24, Z
  da:	86 fd       	sbrc	r24, 6
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <ADC_read+0xa>

    // TODO:
    // return with the read data, use the "ADC" register!
    return (ADC);
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  e6:	08 95       	ret

000000e8 <system_init>:
#define LED_PORT		PORTB
#define LED_PORT_POS	PORTB5

void system_init() {
    // Initialize the LED pin as output
    LED_DDR |= 1 << LED_DDR_POS;
  e8:	25 9a       	sbi	0x04, 5	; 4
    // Set the LED to off as default
    LED_PORT &= ~(1 << LED_PORT_POS);
  ea:	2d 98       	cbi	0x05, 5	; 5
    ADC_init();
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_init>
    // Keep in mind that the UART will run at 115200 baud/sec
    UART_init();
  f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <UART_init>
    sei();
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <main>:
}

int main(void) 
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	6c 97       	sbiw	r28, 0x1c	; 28
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
    uint16_t adc_data;
    system_init();
 10c:	0e 94 74 00 	call	0xe8	; 0xe8 <system_init>
    //----- START OF STDIO IO BUFFER SETUP
    FILE UART_output = FDEV_SETUP_STREAM(UART_send_character, NULL, _FDEV_SETUP_WRITE);
 110:	8e e0       	ldi	r24, 0x0E	; 14
 112:	de 01       	movw	r26, r28
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	fd 01       	movw	r30, r26
 118:	98 2f       	mov	r25, r24
 11a:	11 92       	st	Z+, r1
 11c:	9a 95       	dec	r25
 11e:	e9 f7       	brne	.-6      	; 0x11a <main+0x22>
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	9c 83       	std	Y+4, r25	; 0x04
 124:	2b e0       	ldi	r18, 0x0B	; 11
 126:	31 e0       	ldi	r19, 0x01	; 1
 128:	3a 87       	std	Y+10, r19	; 0x0a
 12a:	29 87       	std	Y+9, r18	; 0x09
    stdout = &UART_output;
 12c:	2d e2       	ldi	r18, 0x2D	; 45
 12e:	31 e0       	ldi	r19, 0x01	; 1
 130:	f9 01       	movw	r30, r18
 132:	b3 83       	std	Z+3, r27	; 0x03
 134:	a2 83       	std	Z+2, r26	; 0x02
    FILE UART_input = FDEV_SETUP_STREAM(NULL, UART_get_character, _FDEV_SETUP_READ);
 136:	1e 96       	adiw	r26, 0x0e	; 14
 138:	fd 01       	movw	r30, r26
 13a:	11 92       	st	Z+, r1
 13c:	8a 95       	dec	r24
 13e:	e9 f7       	brne	.-6      	; 0x13a <main+0x42>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8a 8b       	std	Y+18, r24	; 0x12
 144:	83 e1       	ldi	r24, 0x13	; 19
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	9a 8f       	std	Y+26, r25	; 0x1a
 14a:	89 8f       	std	Y+25, r24	; 0x19
    stdin = &UART_input;
 14c:	f9 01       	movw	r30, r18
 14e:	b1 83       	std	Z+1, r27	; 0x01
 150:	a0 83       	st	Z, r26
    //----- END OF STDIO IO BUFFER SETUP
    printf("Startup...\r\n");
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 36 01 	call	0x26c	; 0x26c <puts>
    while (1) {
        // ADC tester code
        adc_data = ADC_read();
 15a:	0e 94 67 00 	call	0xce	; 0xce <ADC_read>
        // Send data as a number, not as a string.
        // The ADC result has 10bits, but we can only send 8bits at one on UART
        // If we want to display the result on the oscilloscope of the Data Visualizer plugin
        // we have to send the result on 8bits. If we shift down 2 times, we will get the top 8
        // bits of the data.
        UART_send_character(adc_data >> 2);
 15e:	96 95       	lsr	r25
 160:	87 95       	ror	r24
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	0e 94 0b 01 	call	0x216	; 0x216 <UART_send_character>
 16a:	f7 cf       	rjmp	.-18     	; 0x15a <main+0x62>

0000016c <__vector_18>:
#include "UART_driver.h"
#include <avr/io.h>
#include <stdint.h>
#include <avr/interrupt.h>

ISR(USART_RX_vect) {
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
    // Put received character into the circular buffer
    *(rx_buffer.write_ptr) = UDR0;
 186:	ec e0       	ldi	r30, 0x0C	; 12
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	a5 8d       	ldd	r26, Z+29	; 0x1d
 18c:	b6 8d       	ldd	r27, Z+30	; 0x1e
 18e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 192:	8c 93       	st	X, r24

    // Increment the write ptr
    // Be aware that the write ptr might point to the end of the buffer.
    // In this case you have to set it back to the start of the buffer
    if (rx_buffer.write_ptr == rx_buffer.tail) {
 194:	25 8d       	ldd	r18, Z+29	; 0x1d
 196:	36 8d       	ldd	r19, Z+30	; 0x1e
 198:	83 8d       	ldd	r24, Z+27	; 0x1b
 19a:	94 8d       	ldd	r25, Z+28	; 0x1c
 19c:	28 17       	cp	r18, r24
 19e:	39 07       	cpc	r19, r25
 1a0:	29 f4       	brne	.+10     	; 0x1ac <__vector_18+0x40>
        rx_buffer.write_ptr = rx_buffer.head;
 1a2:	81 8d       	ldd	r24, Z+25	; 0x19
 1a4:	92 8d       	ldd	r25, Z+26	; 0x1a
 1a6:	96 8f       	std	Z+30, r25	; 0x1e
 1a8:	85 8f       	std	Z+29, r24	; 0x1d
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <__vector_18+0x4e>
    } else {
        rx_buffer.write_ptr++;
 1ac:	ec e0       	ldi	r30, 0x0C	; 12
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	85 8d       	ldd	r24, Z+29	; 0x1d
 1b2:	96 8d       	ldd	r25, Z+30	; 0x1e
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	96 8f       	std	Z+30, r25	; 0x1e
 1b8:	85 8f       	std	Z+29, r24	; 0x1d
    }
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <UART_init>:
    // See the datasheet on page 246 for hints and table 25-9.

    // At first set the baud rate to 115200
    // The CPU clock frequency is 16MHz
    uint16_t ubbr = 8;
    UBRR0H = ubbr >> 8;
 1d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = ubbr;
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    // Set the following frame format: 8N1
    // It's set by default to 8N1

    // Enable TX
    UCSR0B |= 1 << TXEN0;
 1de:	e1 ec       	ldi	r30, 0xC1	; 193
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 60       	ori	r24, 0x08	; 8
 1e6:	80 83       	st	Z, r24

    // Enable RX
    UCSR0B |= 1 << RXEN0;
 1e8:	80 81       	ld	r24, Z
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	80 83       	st	Z, r24

    // Enable RX interrupt
    UCSR0B |= 1 << RXCIE0;
 1ee:	80 81       	ld	r24, Z
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	80 83       	st	Z, r24

    // Initialize circular buffer pointers, they should point to the head of the buffer
    rx_buffer.head = &(rx_buffer.buffer[0]);
 1f4:	ec e0       	ldi	r30, 0x0C	; 12
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	f2 8f       	std	Z+26, r31	; 0x1a
 1fa:	e1 8f       	std	Z+25, r30	; 0x19
    rx_buffer.tail = &(rx_buffer.buffer[RX_CIRC_BUFF_LEN - 1]);
 1fc:	84 e2       	ldi	r24, 0x24	; 36
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	94 8f       	std	Z+28, r25	; 0x1c
 202:	83 8f       	std	Z+27, r24	; 0x1b
    rx_buffer.read_ptr = rx_buffer.head;
 204:	81 8d       	ldd	r24, Z+25	; 0x19
 206:	92 8d       	ldd	r25, Z+26	; 0x1a
 208:	90 a3       	std	Z+32, r25	; 0x20
 20a:	87 8f       	std	Z+31, r24	; 0x1f
    rx_buffer.write_ptr = rx_buffer.head;
 20c:	81 8d       	ldd	r24, Z+25	; 0x19
 20e:	92 8d       	ldd	r25, Z+26	; 0x1a
 210:	96 8f       	std	Z+30, r25	; 0x1e
 212:	85 8f       	std	Z+29, r24	; 0x1d
 214:	08 95       	ret

00000216 <UART_send_character>:
void UART_send_character(char character) {
    // This function can send a character through UART with polling method
    // See page 247 of the datasheet for hints, be aware that the code in the datasheet has a problem :)

    // Wait for empty USART buffer register
    while ( !( UCSR0A & (1 << UDRE0)) );
 216:	e0 ec       	ldi	r30, 0xC0	; 192
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	90 81       	ld	r25, Z
 21c:	95 ff       	sbrs	r25, 5
 21e:	fd cf       	rjmp	.-6      	; 0x21a <UART_send_character+0x4>

    // Put data to USART buffer register
    UDR0 = character;
 220:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 224:	08 95       	ret

00000226 <UART_get_character>:
}

char UART_get_character() {
    // Wait for data in the circular buffer, this can be detected if the write and read pointers are pointing to the same memory block
    while ((rx_buffer.read_ptr) == (rx_buffer.write_ptr));
 226:	ec e0       	ldi	r30, 0x0C	; 12
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	27 8d       	ldd	r18, Z+31	; 0x1f
 22c:	30 a1       	ldd	r19, Z+32	; 0x20
 22e:	85 8d       	ldd	r24, Z+29	; 0x1d
 230:	96 8d       	ldd	r25, Z+30	; 0x1e
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	c9 f3       	breq	.-14     	; 0x22a <UART_get_character+0x4>

    // Save the data to a temporary variable
    char to_return = *(rx_buffer.read_ptr);
 238:	ec e0       	ldi	r30, 0x0C	; 12
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	a7 8d       	ldd	r26, Z+31	; 0x1f
 23e:	b0 a1       	ldd	r27, Z+32	; 0x20
 240:	8c 91       	ld	r24, X

    // Increment the read ptr
    // Be aware that the read ptr might point to the end of the buffer.
    // In this case you have to set it back to the start of the buffer
    if (rx_buffer.read_ptr == rx_buffer.tail) {
 242:	47 8d       	ldd	r20, Z+31	; 0x1f
 244:	50 a1       	ldd	r21, Z+32	; 0x20
 246:	23 8d       	ldd	r18, Z+27	; 0x1b
 248:	34 8d       	ldd	r19, Z+28	; 0x1c
 24a:	42 17       	cp	r20, r18
 24c:	53 07       	cpc	r21, r19
 24e:	29 f4       	brne	.+10     	; 0x25a <UART_get_character+0x34>
        rx_buffer.read_ptr = rx_buffer.head;
 250:	21 8d       	ldd	r18, Z+25	; 0x19
 252:	32 8d       	ldd	r19, Z+26	; 0x1a
 254:	30 a3       	std	Z+32, r19	; 0x20
 256:	27 8f       	std	Z+31, r18	; 0x1f
 258:	08 95       	ret
    } else {
        rx_buffer.read_ptr++;
 25a:	ec e0       	ldi	r30, 0x0C	; 12
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	27 8d       	ldd	r18, Z+31	; 0x1f
 260:	30 a1       	ldd	r19, Z+32	; 0x20
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	30 a3       	std	Z+32, r19	; 0x20
 268:	27 8f       	std	Z+31, r18	; 0x1f
    }

    // Return the read character
    return to_return;
}
 26a:	08 95       	ret

0000026c <puts>:
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <__iob+0x2>
 278:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <__iob+0x3>
 27c:	23 81       	ldd	r18, Z+3	; 0x03
 27e:	21 ff       	sbrs	r18, 1
 280:	1b c0       	rjmp	.+54     	; 0x2b8 <puts+0x4c>
 282:	8c 01       	movw	r16, r24
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	f8 01       	movw	r30, r16
 28a:	81 91       	ld	r24, Z+
 28c:	8f 01       	movw	r16, r30
 28e:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <__iob+0x2>
 292:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <__iob+0x3>
 296:	db 01       	movw	r26, r22
 298:	18 96       	adiw	r26, 0x08	; 8
 29a:	ed 91       	ld	r30, X+
 29c:	fc 91       	ld	r31, X
 29e:	19 97       	sbiw	r26, 0x09	; 9
 2a0:	88 23       	and	r24, r24
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <puts+0x44>
 2a4:	09 95       	icall
 2a6:	89 2b       	or	r24, r25
 2a8:	79 f3       	breq	.-34     	; 0x288 <puts+0x1c>
 2aa:	df ef       	ldi	r29, 0xFF	; 255
 2ac:	cf ef       	ldi	r28, 0xFF	; 255
 2ae:	ec cf       	rjmp	.-40     	; 0x288 <puts+0x1c>
 2b0:	8a e0       	ldi	r24, 0x0A	; 10
 2b2:	09 95       	icall
 2b4:	89 2b       	or	r24, r25
 2b6:	19 f0       	breq	.+6      	; 0x2be <puts+0x52>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	9f ef       	ldi	r25, 0xFF	; 255
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <puts+0x56>
 2be:	8d 2f       	mov	r24, r29
 2c0:	9c 2f       	mov	r25, r28
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
